syntax = "proto3";

package {{ .PackageName }};

option go_package = "{{ .GoPackageName }}";

{{- if containsObject }}
import "google/protobuf/any.proto";
{{ end -}}
{{- if containsDate }}
import "google/protobuf/date.proto";
{{ end -}}
{{- if containsTime }}
import "google/protobuf/timeofday.proto";
{{ end -}}
{{- if containsTimestamp }}
import "google/protobuf/timestamp.proto";
{{ end -}}

{{- range $index, $type := .Schema.IntEnums }}

enum {{ $type.Name }} {
    {{ upperCase $type.Name }}_UNSPECIFIED = 0;
{{- range $type.Values }}
    VALUE_{{ . }} = {{ . }};
{{- end }}
}
{{ end -}}


{{- range $index, $type := .Schema.StringEnums }}

enum {{ $type.Name }} {
    {{ upperCase $type.Name }}_UNSPECIFIED = 0;
{{- range $index, $value := $type.Values }}
	{{ upperCase $value }} = {{ add $index 1 }};
{{- end }}
}
{{- end }}

{{ range $key, $type := .Schema.ComplexTypes -}}
message {{ $type.Name }} {
{{ range $index, $prop := $type.Properties }}
	{{ getProtoType $prop.Name $prop.ValueType }} {{ $prop.Name }} = {{ add $index 1 }};
{{ end }}
}

{{ end }}

{{ range $index, $type := .Schema.ComplexTypes -}}
{{- if typeHasTag $type "hort.main-type" }}
message Create{{ $type.Name }}Request {
  {{ $type.Name }} {{ lowerFirstCase $type.Name }} = 1;
}
message Create{{ $type.Name }}Response {
  {{ $type.Name }} {{ lowerFirstCase $type.Name }} = 1;
}

message Get{{ $type.Name }}Request {
  string id = 1;
}
message Get{{ $type.Name }}Response {
  {{ $type.Name }} {{ lowerFirstCase $type.Name }} = 1;
}

message Update{{ $type.Name }}Request {
  {{ $type.Name }} {{ lowerFirstCase $type.Name }} = 1;
}
message Update{{ $type.Name }}Response {
  {{ $type.Name }} {{ lowerFirstCase $type.Name }} = 1;
}

message Delete{{ $type.Name }}Request {
  string id = 1;
}
message Delete{{ $type.Name }}Response {
  bool success = 1;
}

message List{{ $type.Name }}sRequest {
  int32 page_size = 1;
  string page_token = 2;
}
message List{{ $type.Name }}sResponse {
  repeated {{ $type.Name }} {{ lowerFirstCase $type.Name }}s = 1;
  string next_page_token = 2;
}

service {{ $type.Name }}Service {
  rpc Create{{ $type.Name }}(Create{{ $type.Name }}Request) returns (Create{{ $type.Name }}Response);
  rpc GetPerson(Get{{ $type.Name }}Request) returns (Get{{ $type.Name }}Response);
  rpc UpdatePerson(Update{{ $type.Name }}Request) returns (Update{{ $type.Name }}Response);
  rpc DeletePerson(Delete{{ $type.Name }}Request) returns (Delete{{ $type.Name }}Response);
  rpc ListPersons(List{{ $type.Name }}sRequest) returns (List{{ $type.Name }}sResponse);
}

{{ end }}
{{ end }}
